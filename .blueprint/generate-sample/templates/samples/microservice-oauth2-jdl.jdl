/*
 * This is the entity model for university elearning
 * default values: https://www.jhipster.tech/jdl/#annexes
 * Use "jhipster import-jdl model-name.jdl --blueprints nodejs" to generate the entity application
 * Use jhipster 6.x (example 6.8.0)
 * relationship info: https://www.jhipster.tech/managing-relationships/
 * model modified from: https://github.com/jhipster/jdl-samples/blob/master/online-shop.jh
 */

application {
    config {
        applicationType microservice
        baseName microserviceOauth2SqlJdlApp
        testFrameworks [],
        creationTimestamp 1615471285814,
        packageName com.jhipster.node,
        databaseType sql,
        devDatabaseType sqlite,
        prodDatabaseType mysql,
        authenticationType oauth2,
        enableTranslation false,
        nativeLanguage en,
        // jhipster-needle-jdl-application-config
    }
}


// JDL definition entity for online shop application

enum CategoryStatus {
    AVAILABLE, RESTRICTED, DISABLED
}

entity Category {
    description String required,
    sortOrder Integer,
    dateAdded LocalDate,
    dateModified LocalDate,
    status CategoryStatus
}

entity Product {
    title String required,
    keywords String pattern(/^[a-z]+$/),
    description String,
    rating Integer,
    dateAdded LocalDate,
    dateModified LocalDate
}

entity Customer {
    firstName String,
    lastName String,
    email String,
    telephone String
}

entity Address {
    address1 String,
    address2 String,
    city String,
    postcode String required maxlength(10),
    country String required maxlength(2)
}

entity WishList {
    title String required,
    // restricted Boolean
}

entity ShopUser {
    preference String
}

relationship OneToOne {
  ShopUser{internalUser} to User with builtInEntity
}

relationship OneToMany {
    Customer{wishList(title)} to WishList{customer},
    WishList{product(title)} to Product{wishList},
    Customer{address} to Address{customer},
    ShopUser{products} to Product
}


relationship ManyToOne {
    Category{parent} to Category
}


relationship ManyToMany {
    Category{product(title)} to Product{category}
}


paginate Customer, Product, Category with pagination
paginate Address with pagination
paginate Product with infinite-scroll

service Category with serviceClass
