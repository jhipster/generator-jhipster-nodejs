// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`SubGenerator node-server of nodejs JHipster blueprint > run > should succeed 1`] = `
{
  ".dockerignore": {
    "stateCleared": "modified",
  },
  ".editorconfig": {
    "stateCleared": "modified",
  },
  ".gitattributes": {
    "stateCleared": "modified",
  },
  ".gitignore": {
    "stateCleared": "modified",
  },
  ".husky/pre-commit": {
    "stateCleared": "modified",
  },
  ".lintstagedrc.js": {
    "stateCleared": "modified",
  },
  ".prettierignore": {
    "stateCleared": "modified",
  },
  ".prettierrc": {
    "stateCleared": "modified",
  },
  ".yo-rc.json": {
    "stateCleared": "modified",
  },
  "Dockerfile": {
    "stateCleared": "modified",
  },
  "README.md": {
    "stateCleared": "modified",
  },
  "docker/app.yml": {
    "stateCleared": "modified",
  },
  "docker/postgresql.yml": {
    "stateCleared": "modified",
  },
  "docker/prometheus/prometheus.yml": {
    "stateCleared": "modified",
  },
  "docker/services.yml": {
    "stateCleared": "modified",
  },
  "docker/sonar.yml": {
    "stateCleared": "modified",
  },
  "package.json": {
    "stateCleared": "modified",
  },
  "server/.env": {
    "stateCleared": "modified",
  },
  "server/.server.eslintignore": {
    "stateCleared": "modified",
  },
  "server/.server.eslintrc.json": {
    "stateCleared": "modified",
  },
  "server/README.md": {
    "stateCleared": "modified",
  },
  "server/e2e/account.e2e-spec.ts": {
    "stateCleared": "modified",
  },
  "server/e2e/app.e2e-spec.ts": {
    "stateCleared": "modified",
  },
  "server/e2e/jest.e2e.config.json": {
    "stateCleared": "modified",
  },
  "server/e2e/setup.test.js": {
    "stateCleared": "modified",
  },
  "server/e2e/user.e2e-spec.ts": {
    "stateCleared": "modified",
  },
  "server/nest-cli.json": {
    "stateCleared": "modified",
  },
  "server/package.json": {
    "stateCleared": "modified",
  },
  "server/scripts/copy-resources.ts": {
    "stateCleared": "modified",
  },
  "server/sonar-project.properties": {
    "stateCleared": "modified",
  },
  "server/src/app.module.ts": {
    "stateCleared": "modified",
  },
  "server/src/client/header-util.ts": {
    "stateCleared": "modified",
  },
  "server/src/client/interceptors/logging.interceptor.ts": {
    "stateCleared": "modified",
  },
  "server/src/client/request.ts": {
    "stateCleared": "modified",
  },
  "server/src/config.ts": {
    "stateCleared": "modified",
  },
  "server/src/config/application-dev.yml": {
    "stateCleared": "modified",
  },
  "server/src/config/application-prod.yml": {
    "stateCleared": "modified",
  },
  "server/src/config/application-test.yml": {
    "stateCleared": "modified",
  },
  "server/src/config/application.yml": {
    "stateCleared": "modified",
  },
  "server/src/domain/authority.entity.ts": {
    "stateCleared": "modified",
  },
  "server/src/domain/base/base.entity.ts": {
    "stateCleared": "modified",
  },
  "server/src/domain/base/pagination.entity.ts": {
    "stateCleared": "modified",
  },
  "server/src/domain/user.entity.ts": {
    "stateCleared": "modified",
  },
  "server/src/main.ts": {
    "stateCleared": "modified",
  },
  "server/src/migrations/1570200270081-CreateTables.ts": {
    "stateCleared": "modified",
  },
  "server/src/migrations/1570200490072-SeedUsersRoles.ts": {
    "stateCleared": "modified",
  },
  "server/src/module/auth.module.ts": {
    "stateCleared": "modified",
  },
  "server/src/module/user.module.ts": {
    "stateCleared": "modified",
  },
  "server/src/orm.config.ts": {
    "stateCleared": "modified",
  },
  "server/src/repository/authority.repository.ts": {
    "stateCleared": "modified",
  },
  "server/src/repository/user.repository.ts": {
    "stateCleared": "modified",
  },
  "server/src/security/decorators/auth-user.decorator.ts": {
    "stateCleared": "modified",
  },
  "server/src/security/decorators/roles.decorator.ts": {
    "stateCleared": "modified",
  },
  "server/src/security/guards/auth.guard.ts": {
    "stateCleared": "modified",
  },
  "server/src/security/guards/roles.guard.ts": {
    "stateCleared": "modified",
  },
  "server/src/security/index.ts": {
    "stateCleared": "modified",
  },
  "server/src/security/passport.jwt.strategy.ts": {
    "stateCleared": "modified",
  },
  "server/src/security/password-util.ts": {
    "stateCleared": "modified",
  },
  "server/src/security/payload.interface.ts": {
    "stateCleared": "modified",
  },
  "server/src/security/role-type.ts": {
    "stateCleared": "modified",
  },
  "server/src/service/auth.service.ts": {
    "stateCleared": "modified",
  },
  "server/src/service/dto/base.dto.ts": {
    "stateCleared": "modified",
  },
  "server/src/service/dto/password-change.dto.ts": {
    "stateCleared": "modified",
  },
  "server/src/service/dto/user-login.dto.ts": {
    "stateCleared": "modified",
  },
  "server/src/service/dto/user.dto.ts": {
    "stateCleared": "modified",
  },
  "server/src/service/mapper/user.mapper.ts": {
    "stateCleared": "modified",
  },
  "server/src/service/user.service.ts": {
    "stateCleared": "modified",
  },
  "server/src/swagger.ts": {
    "stateCleared": "modified",
  },
  "server/src/web/rest/account.controller.ts": {
    "stateCleared": "modified",
  },
  "server/src/web/rest/management.controller.ts": {
    "stateCleared": "modified",
  },
  "server/src/web/rest/public.user.controller.ts": {
    "stateCleared": "modified",
  },
  "server/src/web/rest/user.controller.ts": {
    "stateCleared": "modified",
  },
  "server/src/web/rest/user.jwt.controller.ts": {
    "stateCleared": "modified",
  },
  "server/test/admin/management.controller.spec.ts": {
    "stateCleared": "modified",
  },
  "server/tsconfig.build.json": {
    "stateCleared": "modified",
  },
  "server/tsconfig.json": {
    "stateCleared": "modified",
  },
  "server/webpack.server.prod.config.js": {
    "stateCleared": "modified",
  },
  "sonar-project.properties": {
    "stateCleared": "modified",
  },
}
`;

exports[`SubGenerator node-server of nodejs JHipster blueprint > without client > README should match snapshot 1`] = `
{
  "README.md": {
    "contents": "# jhipster

This application was generated using the [NodeJS blueprint](https://github.com/jhipster/generator-jhipster-nodejs) of JHipster 8.0.0-rc.1, you can find documentation and help at [https://www.jhipster.tech/documentation-archive/v8.0.0-rc.1](https://www.jhipster.tech/documentation-archive/v8.0.0-rc.1). For any questions you can refer to the stream lead: [Angelo Manganiello](https://github.com/amanganiello90).

## Project Structure

Node is required for generation and recommended for development. \`package.json\` is always generated for a better development experience with prettier, commit hooks, scripts and so on.

In the project root, JHipster generates configuration files for tools like git, prettier, husky, and others that are well known and you can find references in the web.

- \`.yo-rc.json\` - Yeoman configuration file
JHipster configuration is stored in this file at \`generator-jhipster\` key. You may find \`generator-jhipster-*\` for specific blueprints configuration.
- \`.yo-resolve\` (optional) - Yeoman conflict resolver
Allows to use a specific action when conflicts are found skipping prompts for files that matches a pattern. Each line should match \`[pattern] [action]\` with pattern been a [Minimatch](https://github.com/isaacs/minimatch#minimatch) pattern and action been one of skip (default if ommited) or force. Lines starting with \`#\` are considered comments and are ignored.
- \`.jhipster/*.json\` - JHipster entity configuration files
- \`/docker/\` - Docker configurations for the application and services that the application depends on
- \`/client/\` - Web application.
- \`/server/\` - NodeJS server application.

## Development

### JWT authentication and authorization

Congratulations! You've selected an excellent way to secure your NHipster application. If you're not sure what JSON Web Token (JWT) is, please see [What the Heck is JWT?](https://jwt.io/introduction/)

Your app uses, to get and use the token, the \`server//src/config/application.yml\` settings:

\`\`\`yaml
  ...
  security:
    authentication:
        jwt:
            # This token must be encoded using Base64 and be at least 256 bits long (you can type \`openssl rand -base64 64\` on your command line to generate a 512 bits one)
            base64-secret: {yourSecret}
            # Token is valid 24 hours
            token-validity-in-seconds: 86400
            token-validity-in-seconds-for-remember-me: 2592000
\`\`\`

You can use the default secret created from the app, or change it.
So to get a token, you have to pass a POST request on the _api/authenticate_ url with **UserLoginDTO** as body.
For this you can use **swagger ui** on **/api/v2/api-docs** path, or the client login page (if you have generated it).

### Using NestJS CLI

You can also use [NestJS CLI][] to generate some custom server code.

For example, the following command:

    nest generate module my-module

will generate the file:

    create server//src/my-component/my-component.module.ts


### Building and running

#### Running

\`\`\`bash
npm run start:app
\`\`\`

#### Building

\`\`\`bash
npm run build:app
\`\`\`

The build folder with all compiled sources will be **server//dist**.

> For more explanation about full stack server/client build refer to [server//README.md](server//README.md)


## Building for production


## Testing



## Others

### Code quality using Sonar

Sonar is used to analyse code quality. You can start a local Sonar server (accessible on http://localhost:9001) with:

\`\`\`
docker compose -f src/main/docker/sonar.yml up -d
\`\`\`

Note: we have turned off forced authentication redirect for UI in [src/main/docker/sonar.yml](src/main/docker/sonar.yml) for out of the box experience while trying out SonarQube, for real use cases turn it back on.

You can run a Sonar analysis with using the [sonar-scanner](https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner).
Then, run a Sonar analysis in the server/ folder:

\`\`\`sh
npm run sonar:scanner
\`\`\`

For more information, refer to the [Code quality page][].


[JHipster Homepage and latest documentation]: https://www.jhipster.tech
[JHipster 8.0.0-rc.1 archive]: https://www.jhipster.tech/documentation-archive/v8.0.0-rc.1
[Using JHipster in development]: https://www.jhipster.tech/documentation-archive/v8.0.0-rc.1/development/
[Using Docker and Docker-Compose]: https://www.jhipster.tech/documentation-archive/v8.0.0-rc.1/docker-compose
[Using JHipster in production]: https://www.jhipster.tech/documentation-archive/v8.0.0-rc.1/production/
[Running tests page]: https://www.jhipster.tech/documentation-archive/v8.0.0-rc.1/running-tests/
[Code quality page]: https://www.jhipster.tech/documentation-archive/v8.0.0-rc.1/code-quality/
[Setting up Continuous Integration]: https://www.jhipster.tech/documentation-archive/v8.0.0-rc.1/setting-up-ci/

[Node.js]: https://nodejs.org/
[NPM]: https://www.npmjs.com/
[Node.js]: https://nodejs.org/
[Webpack]: https://webpack.github.io/
[Jest]: https://facebook.github.io/jest/
[NestJS]: https://nestjs.com/
[NestJS CLI]: https://docs.nestjs.com/cli/usages
",
    "stateCleared": "modified",
  },
  "server/README.md": {
    "contents": "<p align=\\"center\\">
  <a href=\\"http://nestjs.com/\\" target=\\"blank\\"><img src=\\"https://nestjs.com/img/logo_text.svg\\" width=\\"320\\" alt=\\"Nest Logo\\" /></a>
</p>

[travis-image]: https://api.travis-ci.org/nestjs/nest.svg?branch=master
[travis-url]: https://travis-ci.org/nestjs/nest
[linux-image]: https://img.shields.io/travis/nestjs/nest/master.svg?label=linux
[linux-url]: https://travis-ci.org/nestjs/nest

  <p align=\\"center\\">A progressive <a href=\\"http://nodejs.org\\" target=\\"blank\\">Node.js</a> framework for building efficient and scalable server-side applications, heavily inspired by <a href=\\"https://angular.io\\" target=\\"blank\\">Angular</a>.</p>
    <p align=\\"center\\">
        <a href=\\"https://www.npmjs.com/~nestjscore\\"><img src=\\"https://img.shields.io/npm/v/@nestjs/core.svg\\" alt=\\"NPM Version\\" /></a>
        <a href=\\"https://www.npmjs.com/~nestjscore\\"><img src=\\"https://img.shields.io/npm/l/@nestjs/core.svg\\" alt=\\"Package License\\" /></a>
        <a href=\\"https://www.npmjs.com/~nestjscore\\"><img src=\\"https://img.shields.io/npm/dm/@nestjs/core.svg\\" alt=\\"NPM Downloads\\" /></a>
        <a href=\\"https://travis-ci.org/nestjs/nest\\"><img src=\\"https://api.travis-ci.org/nestjs/nest.svg?branch=master\\" alt=\\"Travis\\" /></a>
        <a href=\\"https://travis-ci.org/nestjs/nest\\"><img src=\\"https://img.shields.io/travis/nestjs/nest/master.svg?label=linux\\" alt=\\"Linux\\" /></a>
        <a href=\\"https://coveralls.io/github/nestjs/nest?branch=master\\"><img src=\\"https://coveralls.io/repos/github/nestjs/nest/badge.svg?branch=master#5\\" alt=\\"Coverage\\" /></a>
        <a href=\\"https://discord.gg/G7Qnnhy\\" target=\\"_blank\\"><img src=\\"https://img.shields.io/badge/discord-online-brightgreen.svg\\" alt=\\"Discord\\"/></a>
        <a href=\\"https://opencollective.com/nest#backer\\"><img src=\\"https://opencollective.com/nest/backers/badge.svg\\" alt=\\"Backers on Open Collective\\" /></a>
        <a href=\\"https://opencollective.com/nest#sponsor\\"><img src=\\"https://opencollective.com/nest/sponsors/badge.svg\\" alt=\\"Sponsors on Open Collective\\" /></a>
          <a href=\\"https://paypal.me/kamilmysliwiec\\"><img src=\\"https://img.shields.io/badge/Donate-PayPal-dc3d53.svg\\"/></a>
          <a href=\\"https://twitter.com/nestframework\\"><img src=\\"https://img.shields.io/twitter/follow/nestframework.svg?style=social&label=Follow\\"></a>
        </p>
          <!--[![Backers on Open Collective](https://opencollective.com/nest/backers/badge.svg)](https://opencollective.com/nest#backer)
          [![Sponsors on Open Collective](https://opencollective.com/nest/sponsors/badge.svg)](https://opencollective.com/nest#sponsor)-->

## Description

[NestJS Framework](https://github.com/nestjs/nest) server project generated from official [JHipster NodeJS blueprint](https://github.com/jhipster/generator-jhipster-nodejs).

## Installation

\`\`\`bash
$ npm install
\`\`\`

## TypeORM configuration

### Define your prod database

As default your project will use an sqlite database (or a mongodb in memory).
For prod database configuration,
you don't have to do nothing if you use a docker-compose with a project database image.
To use other custom instance, in [src/orm.config.ts](src/orm.config.ts) change **database, host, port, username and password** according your values:


\`\`\`ts
if(process.env.BACKEND_ENV==='prod'){
  ormconfig = {
      ...
      database: 'YOUR_DATABASE_NAME'
      host: 'localhost',
      port: 3307,
      username: 'sa',
      password: 'yourStrong(!)Password',
      logging: false,
      synchronize: commonConf.SYNCRONIZE,
      entities: commonConf.ENTITIES,
      migrations: commonConf.MIGRATIONS,
      cli: commonConf.CLI,
      migrationsRun: commonConf.MIGRATIONS_RUN,
  };
}

\`\`\`

**To use it at runtime read the below section.**

### Migration data and schema

According [typeORM migration guide](https://github.com/typeorm/typeorm/blob/master/docs/migrations.md),
there are under [src/migrations/](src/migrations/) the scripts to create the database schema and after to insert data seed.
The scripts are automatically run in the first start up, and after anymore.

## Running the app

\`\`\`bash
# development
$ npm run start

# watch mode
$ npm run start:dev

# build transpiling files in javascript
$ npm run build

# run javascript build from the source project
$ npm run start:prod

# run javascript build with node
$ node dist/main.js

# build bundle with webpack
$ npm run webpack:prod

# run bundle with node (not require node_modules folder)
$ node dist/bundle.js
\`\`\`

### Using .env file and run in prod

The app uses a **BACKEND_ENV** variable with **dev** default value in the [.env](.env) file.
If you change the value to **prod**, you will use the **prod database at runtime** as defined in [src/orm.config.ts](src/orm.config.ts).
You can also define all the variables that you want in that file. See https://www.npmjs.com/package/dotenv for the usage.

> The standard values used from BACKEND_ENV are: dev, prod or test.
> You can define your custom value for BACKEND_ENV, but remember to add an application-{BACKEND_ENV}.yml file in your [config folder](src/config), and a database configuration for that environment value, according the [src/orm.config.ts](src/orm.config.ts).

If you don't want to set a value in the .env file, you can specify its in the runtime process.
For example:

\`\`\`bash

# development in prod environment
# in linux
$ BACKEND_ENV=prod npm run start
# in windows
$ set BACKEND_ENV=prod&& npm run start

# run javascript build with node in prod environment
# in linux
$ BACKEND_ENV=prod node dist/main.js
# in windows
$ set BACKEND_ENV=prod&& node dist/main.js

# run bundle with node (not require node_modules folder)
$ node dist/bundle.js
\`\`\`

> The webpack build bundle automatically is configured for prod env, and **can run without node_modules**.

## Lint

\`\`\`bash
# run lint
$ npm run lint

# fix lint issues
$ npm run lint:fix

\`\`\`

## Debug

\`\`\`bash
# run this and after you can execute debug task in VSCode
$ npm run start:debug

\`\`\`

## Test

\`\`\`bash
# unit tests
$ npm run test

# lint
$ npm run lint

# fix lint issues
$ npm run lint:fix

# test coverage of unit tests
$ npm run test:cov

# e2e tests with full app coverage report
$ npm run test:e2e

\`\`\`

## Support

Nest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please [read more here](https://docs.nestjs.com/support).

## Stay in touch

- Community - [jhipster homepage](https://www.jhipster.tech)
- Stream Lead - [Angelo Manganiello](https://github.com/amanganiello90)
- Website And Guide - [https://nestjs.com](https://nestjs.com/)
- Twitter - [@nestframework](https://twitter.com/nestframework)

## License

Nest is [MIT licensed](LICENSE).
",
    "stateCleared": "modified",
  },
}
`;

exports[`SubGenerator node-server of nodejs JHipster blueprint > without client > should succeed 1`] = `
{
  ".dockerignore": {
    "stateCleared": "modified",
  },
  ".editorconfig": {
    "stateCleared": "modified",
  },
  ".gitattributes": {
    "stateCleared": "modified",
  },
  ".gitignore": {
    "stateCleared": "modified",
  },
  ".husky/pre-commit": {
    "stateCleared": "modified",
  },
  ".lintstagedrc.js": {
    "stateCleared": "modified",
  },
  ".prettierignore": {
    "stateCleared": "modified",
  },
  ".prettierrc": {
    "stateCleared": "modified",
  },
  ".yo-rc.json": {
    "stateCleared": "modified",
  },
  "Dockerfile": {
    "stateCleared": "modified",
  },
  "README.md": {
    "stateCleared": "modified",
  },
  "docker/app.yml": {
    "stateCleared": "modified",
  },
  "docker/postgresql.yml": {
    "stateCleared": "modified",
  },
  "docker/prometheus/prometheus.yml": {
    "stateCleared": "modified",
  },
  "docker/services.yml": {
    "stateCleared": "modified",
  },
  "docker/sonar.yml": {
    "stateCleared": "modified",
  },
  "package.json": {
    "stateCleared": "modified",
  },
  "server/.env": {
    "stateCleared": "modified",
  },
  "server/.server.eslintignore": {
    "stateCleared": "modified",
  },
  "server/.server.eslintrc.json": {
    "stateCleared": "modified",
  },
  "server/README.md": {
    "stateCleared": "modified",
  },
  "server/e2e/account.e2e-spec.ts": {
    "stateCleared": "modified",
  },
  "server/e2e/app.e2e-spec.ts": {
    "stateCleared": "modified",
  },
  "server/e2e/jest.e2e.config.json": {
    "stateCleared": "modified",
  },
  "server/e2e/setup.test.js": {
    "stateCleared": "modified",
  },
  "server/e2e/user.e2e-spec.ts": {
    "stateCleared": "modified",
  },
  "server/nest-cli.json": {
    "stateCleared": "modified",
  },
  "server/package.json": {
    "stateCleared": "modified",
  },
  "server/scripts/copy-resources.ts": {
    "stateCleared": "modified",
  },
  "server/sonar-project.properties": {
    "stateCleared": "modified",
  },
  "server/src/app.module.ts": {
    "stateCleared": "modified",
  },
  "server/src/client/header-util.ts": {
    "stateCleared": "modified",
  },
  "server/src/client/interceptors/logging.interceptor.ts": {
    "stateCleared": "modified",
  },
  "server/src/client/request.ts": {
    "stateCleared": "modified",
  },
  "server/src/config.ts": {
    "stateCleared": "modified",
  },
  "server/src/config/application-dev.yml": {
    "stateCleared": "modified",
  },
  "server/src/config/application-prod.yml": {
    "stateCleared": "modified",
  },
  "server/src/config/application-test.yml": {
    "stateCleared": "modified",
  },
  "server/src/config/application.yml": {
    "stateCleared": "modified",
  },
  "server/src/domain/authority.entity.ts": {
    "stateCleared": "modified",
  },
  "server/src/domain/base/base.entity.ts": {
    "stateCleared": "modified",
  },
  "server/src/domain/base/pagination.entity.ts": {
    "stateCleared": "modified",
  },
  "server/src/domain/user.entity.ts": {
    "stateCleared": "modified",
  },
  "server/src/main.ts": {
    "stateCleared": "modified",
  },
  "server/src/migrations/1570200270081-CreateTables.ts": {
    "stateCleared": "modified",
  },
  "server/src/migrations/1570200490072-SeedUsersRoles.ts": {
    "stateCleared": "modified",
  },
  "server/src/module/auth.module.ts": {
    "stateCleared": "modified",
  },
  "server/src/module/user.module.ts": {
    "stateCleared": "modified",
  },
  "server/src/orm.config.ts": {
    "stateCleared": "modified",
  },
  "server/src/repository/authority.repository.ts": {
    "stateCleared": "modified",
  },
  "server/src/repository/user.repository.ts": {
    "stateCleared": "modified",
  },
  "server/src/security/decorators/auth-user.decorator.ts": {
    "stateCleared": "modified",
  },
  "server/src/security/decorators/roles.decorator.ts": {
    "stateCleared": "modified",
  },
  "server/src/security/guards/auth.guard.ts": {
    "stateCleared": "modified",
  },
  "server/src/security/guards/roles.guard.ts": {
    "stateCleared": "modified",
  },
  "server/src/security/index.ts": {
    "stateCleared": "modified",
  },
  "server/src/security/passport.jwt.strategy.ts": {
    "stateCleared": "modified",
  },
  "server/src/security/password-util.ts": {
    "stateCleared": "modified",
  },
  "server/src/security/payload.interface.ts": {
    "stateCleared": "modified",
  },
  "server/src/security/role-type.ts": {
    "stateCleared": "modified",
  },
  "server/src/service/auth.service.ts": {
    "stateCleared": "modified",
  },
  "server/src/service/dto/base.dto.ts": {
    "stateCleared": "modified",
  },
  "server/src/service/dto/password-change.dto.ts": {
    "stateCleared": "modified",
  },
  "server/src/service/dto/user-login.dto.ts": {
    "stateCleared": "modified",
  },
  "server/src/service/dto/user.dto.ts": {
    "stateCleared": "modified",
  },
  "server/src/service/mapper/user.mapper.ts": {
    "stateCleared": "modified",
  },
  "server/src/service/user.service.ts": {
    "stateCleared": "modified",
  },
  "server/src/swagger.ts": {
    "stateCleared": "modified",
  },
  "server/src/web/rest/account.controller.ts": {
    "stateCleared": "modified",
  },
  "server/src/web/rest/management.controller.ts": {
    "stateCleared": "modified",
  },
  "server/src/web/rest/public.user.controller.ts": {
    "stateCleared": "modified",
  },
  "server/src/web/rest/user.controller.ts": {
    "stateCleared": "modified",
  },
  "server/src/web/rest/user.jwt.controller.ts": {
    "stateCleared": "modified",
  },
  "server/test/admin/management.controller.spec.ts": {
    "stateCleared": "modified",
  },
  "server/tsconfig.build.json": {
    "stateCleared": "modified",
  },
  "server/tsconfig.json": {
    "stateCleared": "modified",
  },
  "server/webpack.server.prod.config.js": {
    "stateCleared": "modified",
  },
  "sonar-project.properties": {
    "stateCleared": "modified",
  },
}
`;
