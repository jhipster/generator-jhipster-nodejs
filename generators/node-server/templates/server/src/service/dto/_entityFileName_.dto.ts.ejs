/* eslint-disable @typescript-eslint/no-unused-vars */
import { ApiProperty } from '@nestjs/swagger';
<%_ if (anyPropertyHasValidation) { _%>
import { IsNotEmpty, MinLength, MaxLength, Length, Min, Max, Matches } from 'class-validator';
<%_ } _%>
import { BaseDTO } from './base.dto';

<%_
let isUserRelationship = false;
const uniqueEntities = {};
const uniqueEnums = {};
const fieldsWithoutId = [];

for (idx in fields) {
    if (fields[idx].fieldIsEnum && (
            !uniqueEnums[fields[idx].fieldType] || (uniqueEnums[fields[idx].fieldType] && fields[idx].fieldValues.length !== 0))) {
        uniqueEnums[fields[idx].fieldType] = this._.kebabCase(fields[idx].fieldType);
    }
    if (fields[idx].fieldName !== 'id') {
        fieldsWithoutId.push(fields[idx]);
    }
}
for (idx in relationships) {
    const relationship = relationships[idx];
    const otherDto = relationship.otherEntity.dtoClass;
    if (relationship.otherEntity.entityClass === 'User'){
        isUserRelationship = true;
    }
    else if (!uniqueEntities[otherDto] && otherDto != dtoClass) {
        uniqueEntities[otherDto] = relationship.otherEntityFileName;
    }
}
_%>

<%_ Object.keys(uniqueEntities).forEach(function(entityDto) { _%>
import { <%= entityDto %> } from './<%= uniqueEntities[entityDto] %>.dto';
<%_ }); _%>
<%_ Object.keys(uniqueEnums).forEach(function(enumClass) { _%>
import { <%= enumClass %> } from '../../domain/enumeration/<%= uniqueEnums[enumClass] %>';
<%_ }); _%>

<%_ if (isUserRelationship === true) { _%>
import { <%= user.dtoClass%> } from './user.dto';
<%_ } _%>

/**
 * A <%= dtoClass %> object.
 */
export class <%= dtoClass %> extends BaseDTO {

    <%_ for (idx in fieldsWithoutId) {
        const field = fieldsWithoutId[idx];
       if (typeof field.javadoc !== 'undefined') { _%>
    <%- formatAsFieldJavadoc(field.javadoc) %>
    <%_ }
        let required = false;
        const fieldValidate = field.fieldValidate;
        const fieldValidateRules = field.fieldValidateRules;
        const fieldType = field.fieldType;
        const fieldTypeBlobContent = field.fieldTypeBlobContent;
        const fieldName = field.fieldName;
        const fieldNameUnderscored = field.fieldNameUnderscored;
        const fieldNameAsDatabaseColumn = field.fieldNameAsDatabaseColumn;
        if (fieldValidate === true) {
            if (fieldValidateRules.includes('required')) {
                required = true;
            }
            _%>
            <%- include('../../common/field_validators', { field }); -%>
        <%_ } _%>
            <%_ if (field.fieldIsEnum) { _%>
            @ApiProperty({ enum: <%= fieldType %>, <%_ if (typeof field.javadoc != 'undefined') { _%> description: '<%- formatAsApiDescription(field.javadoc) %>' <%_ } else { _%> description: '<%= fieldName %> enum field' <%_ } if (!required) { _%>, required: false <%_ } _%>})
            <%_ } else { _%>
            @ApiProperty({ <%_ if (typeof field.javadoc != 'undefined') { _%> description: '<%- formatAsApiDescription(field.javadoc) %>' <%_ } else { _%> description: '<%= fieldName %> field' <%_ } if (!required) { _%>, required: false <%_ } _%>})
            <%_ } _%>
        <%= fieldName %><%- field.fieldValidationRequired ? '' : '?' %>: <%= field.nodejsFieldType %>;

        <%_ if ((fieldType === 'byte[]' || fieldType === 'ByteBuffer') && fieldTypeBlobContent !== 'text') { _%>

        <%= fieldName %>ContentType<%- field.fieldValidationRequired ? '' : '?' %>: string;
        <%_ }
        } _%>

        <%_
  for (const relationship of relationships) {
        if (typeof relationship.javadoc != 'undefined') { _%>
  <%- formatAsFieldJavadoc(relationship.javadoc) %>
        <%_ } _%>
  @ApiProperty({ type: () => <%= relationship.otherEntity.dtoClass %><%- relationship.collection ? ', isArray: true' : '' %>, <%_ if (typeof relationship.javadoc != 'undefined') { _%>  description: '<%- formatAsApiDescription(relationship.javadoc) %>' <%_ } else { _%> description: '<%= relationship.propertyName %> relationship' <%_ } _%> })
  <%= relationship.propertyName %><%- relationship.relationshipValidationRequired ? '' : '?' %>: <%= relationship.otherEntity.dtoClass %><%- relationship.collection ? '[]' : '' %>;
  <%_ } _%>

  // jhipster-needle-entity-add-field - JHipster will add fields here, do not remove
}
