import { TypeOrmModuleOptions } from '@nestjs/typeorm';
<%_ if (databaseType === 'mongodb') { _%>
import { MongoMemoryServer } from 'mongodb-memory-server';
<%_ } _%>
// jhipster-needle-add-entity-to-ormconfig-imports - JHipster will add code here, do not remove

<%_ if (databaseType === 'mongodb') { _%>
async function ormConfig(): Promise<TypeOrmModuleOptions> {
let mongod;
if (process.env.BACKEND_ENV !== 'prod') {
    mongod = await MongoMemoryServer.create();
}
<%_ } else { _%>
function ormConfig(): TypeOrmModuleOptions {
<%_ } _%>
<%_
  const nodeProdDatabaseDriver = databaseType !== 'sql' ? databaseType : (prodDatabaseType === 'postgresql') ? 'postgres' : prodDatabaseType;
  const nodeDevDatabaseDriver = databaseType !== 'sql' ? databaseType : (devDatabaseType === 'postgresql') ? 'postgres' : devDatabaseType;
_%>
  let ormconfig: TypeOrmModuleOptions = {
    name: 'default',
<%_ if (databaseType === 'mongodb') { _%>
    type: '<%= nodeProdDatabaseDriver %>',
    host: 'localhost',
    port: mongod?.instanceInfo?.port ?? 0,
    database: mongod?.instanceInfo?.dbName ?? 'dev',
    useNewUrlParser: true,
    useUnifiedTopology: true,
<%_ } else { _%>
    type: 'sqlite',
    database: __dirname + '../../target/db/sqlite-dev-db.sql',
<%_ } _%>
    logging: true,
  };


  if (process.env.BACKEND_ENV === 'prod') {
    ormconfig = {
      name: 'default',
      type: '<%= nodeProdDatabaseDriver %>',
      database: '<%= (databaseType === 'sql') ? prodDatabaseName : baseName %>',
      host: '<%= (databaseType === 'sql') ? prodDatabaseType : databaseType %>',
      // port: <%= dbPortValue %>,
      username: '<%- (databaseType === 'sql') ? prodDatabaseUsername : '' %>',
      password: '<%- (databaseType === 'sql') ? prodDatabasePassword : '' %>',
      logging: false,
      // synchronize: false,
    };
  } else if (process.env.BACKEND_ENV === 'test') {
    ormconfig = {
      name: 'default',
<%_ if (databaseTypeSql) { _%>
      type: 'sqlite',
      database: ':memory:',
<%_ } else { _%>
      type: '<%= nodeProdDatabaseDriver %>',
      host: 'localhost',
      port: mongod.instanceInfo.port,
      database: mongod.instanceInfo.dbName,
      useNewUrlParser: true,
      useUnifiedTopology: true,
<%_ } _%>
      keepConnectionAlive: true,
      logging: true,
    };
<%_ if (devDatabaseType !== 'sqlite') { _%>

  } else if (process.env.BACKEND_ENV === 'dev') {
    ormconfig = {
      name: 'default',
      type: '<%= nodeDevDatabaseDriver %>',
      database: '<%= (databaseType === 'sql') ? devDatabaseName : baseName %>',
      host: 'localhost',
      // port: <%= dbPortValue %>,
      username: '<%- (databaseType === 'sql') ? devDatabaseUsername : '' %>',
      password: '<%- (databaseType === 'sql') ? devDatabasePassword : '' %>',
      logging: false,
    };
<%_ } _%>
  }

  return {
    synchronize: process.env.BACKEND_ENV === 'test',
    migrationsRun: true,
    entities: [
      // jhipster-needle-add-entity-to-ormconfig-entities - JHipster will add code here, do not remove
    ],
    migrations: [__dirname + '/migrations/**/*{.ts,.js}'],
    cli: {
        migrationsDir: 'src/migrations',
    },
    ...ormconfig,
  };
}

export { ormConfig };
