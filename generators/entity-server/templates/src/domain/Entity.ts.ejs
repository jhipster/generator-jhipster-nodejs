<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%
let importApiModelProperty = true;
let hasDto = dto === 'mapstruct';
let isUsingMapsId = false;
const uniqueEnums = {}; 
for (idx in fields) {
    if (fields[idx].fieldIsEnum && (
            !uniqueEnums[fields[idx].fieldType] || (uniqueEnums[fields[idx].fieldType] && fields[idx].fieldValues.length !== 0))) {
        uniqueEnums[fields[idx].fieldType] = fields[idx].fieldType;
    }
}
%>

import { Entity, Column, PrimaryGeneratedColumn, JoinColumn, OneToOne, ManyToOne, OneToMany, ManyToMany } from 'typeorm';
<%_ if (!hasDto && importApiModelProperty === true) { _%>
import { ApiModelProperty } from '@nestjs/swagger';
<%_ } if (validation) { _%>
import {validate, Contains, IsInt, Length, IsEmail, IsFQDN, IsDate, Min, Max} from "class-validator";
<%_ } _%>

<%_for (idx in relationships) {
    const relationship = relationships[idx];
_%>
import <%= relationship.otherEntityAngularName %> from './<%= relationship.otherEntityAngularName %>';
<%_ } _%>
<%_ Object.keys(uniqueEnums).forEach(function(element) { _%>
import { <%= element %> } from './enumeration/<%= element %>';
<%_ }); _%>
    
<%_ if (typeof javadoc == 'undefined') { _%>
/**
 * A <%= asEntity(entityClass) %>.
 */
<%_ } else { _%>
<%- formatAsClassJavadoc(javadoc) %>
<%_ } _%>
@Entity('<%= entityTableName %>"')
export default class <%= asEntity(entityClass) %>  {

    @PrimaryGeneratedColumn()
    id: <%= pkType === 'String'? 'string' : 'number' %>;

<%_ for (idx in fields) {
    if (typeof fields[idx].javadoc !== 'undefined') { _%>
<%- formatAsFieldJavadoc(fields[idx].javadoc) %>
    <%_ }
    let required = false;
    let unique = false;
    const fieldValidate = fields[idx].fieldValidate;
    const fieldValidateRules = fields[idx].fieldValidateRules;
    const fieldValidateRulesMaxlength = fields[idx].fieldValidateRulesMaxlength;
    const fieldType = fields[idx].fieldType;
    const fieldTypeBlobContent = fields[idx].fieldTypeBlobContent;
    const fieldName = fields[idx].fieldName;
    const fieldNameUnderscored = fields[idx].fieldNameUnderscored;
    const fieldNameAsDatabaseColumn = fields[idx].fieldNameAsDatabaseColumn;
    if (fieldValidate === true) {
        if (fieldValidateRules.includes('required')) {
            required = true;
        }
        if (fieldValidateRules.includes('unique')) {
            unique = true;
        } _%>
    <%- include ../common/field_validators -%>
    <%_ } _%>
    <%_ if (!hasDto && typeof fields[idx].javadoc != 'undefined') { _%>
    @ApiModelProperty({type: '', description: '<%- formatAsApiDescription(fields[idx].javadoc) %>'<% if (required) { %>, required = true<% } %>})
    <%_ } _%>
    <%_ if (fields[idx].fieldIsEnum) { _%>
    @Column({name: '<%-fieldNameAsDatabaseColumn %>', type: 'enum', enum: <%= fieldType %>})
        <%_ } else if (['Instant', 'ZonedDateTime', 'LocalDate'].includes(fieldType)) { _%>
    @Column({name: "<%-fieldNameAsDatabaseColumn %>"<% if (required) { %>, nullable = false<% } %><% if (unique) { %>, unique = true<% } %>})
        <%_ } else if (fieldType === 'BigDecimal') { _%>
    @Column({name: "<%-fieldNameAsDatabaseColumn %>", precision = 10, scale = 2<% if (required) { %>, nullable = false<% } %><% if (unique) { %>, unique = true<% } %>})
        <%_ } else { _%>
    @Column({name: "<%-fieldNameAsDatabaseColumn %>"<% if (fieldValidate === true) { %><% if (fieldValidateRules.includes('maxlength')) { %>, length = <%= fieldValidateRulesMaxlength %><% } %><% if (required) { %>, nullable = false<% } %><% if (unique) { %>, unique = true<% } %><% } %>})
        <%_ } _%>
    <%= fieldName %>: <%= getTsType(fieldType) %>;

    <%_ if ((fieldType === 'byte[]' || fieldType === 'ByteBuffer') && fieldTypeBlobContent !== 'text') { _%>
    @Column({name: '<%-fieldNameAsDatabaseColumn %>_content_type'})
    <%= fieldName %>ContentType: string;
    <%_ }
    } _%>

    <%_
    for (idx in relationships) {
        const relationship = relationships[idx];
        const otherEntityRelationshipName = relationships[idx].otherEntityRelationshipName;
        const otherEntityRelationshipNamePlural = relationships[idx].otherEntityRelationshipNamePlural;
        const relationshipName = relationships[idx].relationshipName;
        const relationshipFieldName = relationships[idx].relationshipFieldName;
        const relationshipFieldNamePlural = relationships[idx].relationshipFieldNamePlural;
        const joinTableName = getJoinTableName(entityTableName, relationshipName, prodDatabaseType);
        const relationshipType = relationships[idx].relationshipType;
        const relationshipValidate = relationships[idx].relationshipValidate;
        const relationshipRequired = relationships[idx].relationshipRequired;
        const otherEntityNameCapitalized = relationships[idx].otherEntityNameCapitalized;
        const ownerSide = relationships[idx].ownerSide;
        const useJPADerivedIdentifier = relationships[idx].useJPADerivedIdentifier;
        if (otherEntityRelationshipName) {
            mappedBy = otherEntityRelationshipName.charAt(0).toLowerCase() + otherEntityRelationshipName.slice(1)
        }
        if (typeof relationships.javadoc != 'undefined') { _%>
<%- formatAsFieldJavadoc(relationships.javadoc) %>
            <%_ if (!hasDto) { _%>
    @ApiModelProperty({description = "<%- formatAsApiDescription(relationships.javadoc) %>"})
            <%_ }_%>
    <%_ }
        if (relationshipType === 'one-to-many') {_%>
    @OneToMany(type => <%= relationship.otherEntityAngularName %>, other => other.<%= entityInstance %>)
    <%= relationshipFieldNamePlural %>: <%= relationship.otherEntityAngularName %>[];

    <%_ } else if (relationshipType === 'many-to-one') { _%>
    @ManyToOne(type => <%= relationship.otherEntityAngularName %>, other => other.<%= entityInstance %>)
    <%= relationshipFieldName %>: <%= relationship.otherEntityAngularName %>;

    <%_ } else if (relationshipType === 'many-to-many') { _%>
    @ManyToMany({})
        <%_ if (ownerSide === true) { _%>
    @JoinTable({
        name: '<%= joinTableName %>',
        joinColumn: { name: '<%= getColumnName(name) %>_id', referencedColumnName: "id" },
        inverseJoinColumn: { name: '<%= getColumnName(relationship.relationshipName) %>_id', referencedColumnName: "id" }
    })
        <%_ } _%>
    <%= relationshipFieldNamePlural %>: <%= relationship.otherEntityAngularName %>[];

    <%_ } else { _%>
    @OneToOne(type => <%= relationship.otherEntityAngularName %>, other => other.<%= entityInstance %>)
    <%_ if (ownerSide) { _%>@JoinColumn()<%_ } _%>
    <%= relationshipFieldName %>: <%= asEntity(otherEntityNameCapitalized) %>;

    <%_ }
    } _%>
    // jhipster-needle-entity-add-field - JHipster will add fields here, do not remove

}
