/* eslint-disable @typescript-eslint/no-unused-vars */
import { ApiProperty } from '@nestjs/swagger';
<%_ if (validation) { _%>
import { IsNotEmpty, MinLength, MaxLength, Length, Min, Max, Matches } from 'class-validator';
<%_ } _%>
import { BaseDTO } from './base.dto';

<%_
let isUserRelationship = false;
const uniqueEntities = {};
const uniqueEnums = {};
const fieldsWithoutId = [];

for (idx in fields) {
    if (fields[idx].fieldIsEnum && (
            !uniqueEnums[fields[idx].fieldType] || (uniqueEnums[fields[idx].fieldType] && fields[idx].fieldValues.length !== 0))) {
        uniqueEnums[fields[idx].fieldType] = _.kebabCase(fields[idx].fieldType);
    }
    if (fields[idx].fieldName !== 'id') {
        fieldsWithoutId.push(fields[idx]);
    }
}
for (idx in relationships) {
    const relationship = relationships[idx];
    const otherDto = asDto(relationship.otherEntity.entityClass);
    if (relationship.otherEntity.entityClass === 'User'){
        isUserRelationship = true;
    }
    else if (!uniqueEntities[otherDto] && otherDto != asDto(entityClass)) {
        uniqueEntities[otherDto] = relationship.otherEntityFileName;
    }
}
_%>

<%_ Object.keys(uniqueEntities).forEach(function(entityDto) { _%>
import { <%= entityDto %> } from './<%= uniqueEntities[entityDto] %>.dto';
<%_ }); _%>
<%_ Object.keys(uniqueEnums).forEach(function(enumClass) { _%>
import { <%= enumClass %> } from '../../domain/enumeration/<%= uniqueEnums[enumClass] %>';
<%_ }); _%>

<%_ if (isUserRelationship === true) { _%>
import { <%= asDto('User')%> } from './user.dto';
<%_ } _%>

/**
 * A <%= asDto(entityClass) %> object.
 */
export class <%= asDto(entityClass) %> extends BaseDTO {

    <%_ for (idx in fieldsWithoutId) {
        const field = fieldsWithoutId[idx];
       if (typeof field.javadoc !== 'undefined') { _%>
    <%- formatAsFieldJavadoc(field.javadoc) %>
    <%_ }
        let required = false;
        const fieldValidate = field.fieldValidate;
        const fieldValidateRules = field.fieldValidateRules;
        const fieldType = field.fieldType;
        const fieldTypeBlobContent = field.fieldTypeBlobContent;
        const fieldName = field.fieldName;
        const fieldNameUnderscored = field.fieldNameUnderscored;
        const fieldNameAsDatabaseColumn = field.fieldNameAsDatabaseColumn;
        const fieldColumnType=addDbType(fieldType);
        if (fieldValidate === true) {
            if (fieldValidateRules.includes('required')) {
                required = true;
            }
            _%>
            <%- include('../../common/field_validators', { field }); -%>
        <%_ } _%>
            <%_ if (field.fieldIsEnum) { _%>
            @ApiProperty({ enum: <%= fieldType %>, <%_ if (typeof field.javadoc != 'undefined') { _%> description: '<%- formatAsApiDescription(field.javadoc) %>' <%_ } else { _%> description: '<%= fieldName %> enum field' <%_ } if (!required) { _%>, required: false <%_ } _%>})
            <%_ } else { _%>
            @ApiProperty({ <%_ if (typeof field.javadoc != 'undefined') { _%> description: '<%- formatAsApiDescription(field.javadoc) %>' <%_ } else { _%> description: '<%= fieldName %> field' <%_ } if (!required) { _%>, required: false <%_ } _%>})
            <%_ } _%>
            <%_ if (field.fieldIsEnum) { _%>
        <%= fieldName %>: <%= fieldType %>;
            <%_ } else { _%>
        <%= fieldName %>: <%= getTsType(fieldType) %>;
            <%_ } _%>

        <%_ if ((fieldType === 'byte[]' || fieldType === 'ByteBuffer') && fieldTypeBlobContent !== 'text') { _%>

        <%= fieldName %>ContentType: string;
        <%_ }
        } _%>

        <%_
        for (idx in relationships) {
            const relationship = relationships[idx];
            const otherEntityRelationshipName = relationship.otherEntityRelationshipName;
            const otherEntityRelationshipNamePlural = relationship.otherEntityRelationshipNamePlural;
            const relationshipName = relationship.relationshipName;
            const relationshipFieldName = relationship.relationshipFieldName;
            const relationshipFieldNamePlural = relationship.relationshipFieldNamePlural;
            const joinTableName = getJoinTableName(entityTableName, relationshipName, prodDatabaseType);
            const relationshipType = relationship.relationshipType;
            const relationshipValidate = relationship.relationshipValidate;
            const relationshipRequired = relationship.relationshipRequired;
            const otherEntityNameCapitalized = relationship.otherEntityNameCapitalized;
            const otherEntityDto = asDto(relationship.otherEntity.entityClass);

        if (typeof relationships.javadoc != 'undefined') { _%>
    <%- formatAsFieldJavadoc(relationships.javadoc) %>
        <%_ } _%>
          <%_ if (relationshipType === 'one-to-many') { _%>
         @ApiProperty({ type: <%= otherEntityDto %>, isArray: true, <%_ if (typeof relationships.javadoc != 'undefined') { _%>  description: '<%- formatAsApiDescription(relationships.javadoc) %>' <%_ } else { _%> description: '<%= relationshipFieldNamePlural %> relationship' <%_ } _%> })
        <%= relationshipFieldNamePlural %>: <%= otherEntityDto %>[];

        <%_ } else if (relationshipType === 'many-to-one') { _%>
        @ApiProperty({ type: <%= otherEntityDto %>, <%_ if (typeof relationships.javadoc != 'undefined') { _%>  description: '<%- formatAsApiDescription(relationships.javadoc) %>' <%_ } else { _%> description: '<%= relationshipFieldName %> relationship' <%_ } _%> })
        <%= relationshipFieldName %>: <%= otherEntityDto %>;

        <%_ } else if (relationshipType === 'many-to-many') { _%>
        @ApiProperty({ type: <%= otherEntityDto %>, isArray: true, <%_ if (typeof relationships.javadoc != 'undefined') { _%>  description: '<%- formatAsApiDescription(relationships.javadoc) %>' <%_ } else { _%> description: '<%= relationshipFieldNamePlural %> relationship' <%_ } _%> })
        <%= relationshipFieldNamePlural %>: <%= otherEntityDto %>[];

        <%_ } else { _%>
        @ApiProperty({ type: <%= otherEntityDto %>, <%_ if (typeof relationships.javadoc != 'undefined') { _%>  description: '<%- formatAsApiDescription(relationships.javadoc) %>' <%_ } else { _%> description: '<%= relationshipFieldName %> relationship' <%_ } _%> })
        <%= relationshipFieldName %>: <%= otherEntityDto %>;

        <%_ }
        } _%>
        // jhipster-needle-entity-add-field - JHipster will add fields here, do not remove

    }
